package org.bd.dev.res.database.items.forms;


import java.beans.Beans;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.RollbackException;

import javax.swing.*;
import java.awt.Component;
import org.bd.dev.res.database.items.EmployeeCategory;
import org.bd.dev.restaurantmanagement.mainpackage.ISoftwareInformation;
import org.bd.dev.restaurantmanagement.mainpackage.SearchForm;

/**
 *
 * @author Alim
 */
public class EmployeeForm extends CommonJPanel implements ISoftwareInformation {

    public EmployeeForm() {
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }

        EmployeeCategoryCombo.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof EmployeeCategory) {
                    EmployeeCategory mec = (EmployeeCategory) value;
                    setText(mec.getEmployeeCategoryName().toString());
                }
                return this;
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.bd.dev.restaurantmanagement.mainpackage.RestaurantManagementApp.class).getContext().getResourceMap(EmployeeForm.class);
        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory(resourceMap.getString("entityManager.persistenceUnit")).createEntityManager(); // NOI18N
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery(resourceMap.getString("query.query")); // NOI18N
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        employeeCategoryQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT e FROM EmployeeCategory e");
        employeeCategoryList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : employeeCategoryQuery.getResultList();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        employeeNameField = new javax.swing.JTextField();
        resignDateField = new javax.swing.JTextField();
        startWorkingDateLabel = new javax.swing.JLabel();
        exceptionalWorkingHourLabel = new javax.swing.JLabel();
        onDutyLabel = new javax.swing.JLabel();
        employeeCategoryIdLabel = new javax.swing.JLabel();
        resignDateLabel = new javax.swing.JLabel();
        exceptionalWorkingHourField = new javax.swing.JTextField();
        startWorkingDateField = new javax.swing.JTextField();
        employeeNameLabel = new javax.swing.JLabel();
        EmployeeCategoryCombo = new javax.swing.JComboBox();
        employeeIdTextBox = new javax.swing.JTextField();
        employeeNameLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        employeeImage = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        setName("Form"); // NOI18N

        masterScrollPane.setName("masterScrollPane"); // NOI18N

        masterTable.setName("masterTable"); // NOI18N
        masterTable.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${employeeId}"));
        columnBinding.setColumnName("Employee Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${employeeName}"));
        columnBinding.setColumnName("Employee Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${employeeCategoryId.employeeCategoryName}"));
        columnBinding.setColumnName("Employee Category Id.employee Category Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${startWorkingDate}"));
        columnBinding.setColumnName("Start Working Date");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${resignDate}"));
        columnBinding.setColumnName("Resign Date");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${onDuty}"));
        columnBinding.setColumnName("On Duty");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${exceptionalWorkingHour}"));
        columnBinding.setColumnName("Exceptional Working Hour");
        columnBinding.setColumnClass(Double.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addMouseListener(formListener);
        masterTable.addKeyListener(formListener);
        masterScrollPane.setViewportView(masterTable);
        masterTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("masterTable.columnModel.title0")); // NOI18N
        masterTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("masterTable.columnModel.title2")); // NOI18N
        masterTable.getColumnModel().getColumn(2).setMinWidth(60);
        masterTable.getColumnModel().getColumn(2).setPreferredWidth(60);
        masterTable.getColumnModel().getColumn(2).setMaxWidth(60);
        masterTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("masterTable.columnModel.title1")); // NOI18N
        masterTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("masterTable.columnModel.title3")); // NOI18N
        masterTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("masterTable.columnModel.title4")); // NOI18N
        masterTable.getColumnModel().getColumn(5).setMinWidth(60);
        masterTable.getColumnModel().getColumn(5).setPreferredWidth(60);
        masterTable.getColumnModel().getColumn(5).setMaxWidth(60);
        masterTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("masterTable.columnModel.title5")); // NOI18N
        masterTable.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("masterTable.columnModel.title6")); // NOI18N

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(formListener);

        refreshButton.setText(resourceMap.getString("refreshButton.text")); // NOI18N
        refreshButton.setName("refreshButton"); // NOI18N
        refreshButton.addActionListener(formListener);

        newButton.setText(resourceMap.getString("newButton.text")); // NOI18N
        newButton.setName("newButton"); // NOI18N
        newButton.addActionListener(formListener);

        deleteButton.setText(resourceMap.getString("deleteButton.text")); // NOI18N
        deleteButton.setName("deleteButton"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(resourceMap.getColor("jPanel1.border.highlightColor"), null)); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        employeeNameField.setName("employeeNameField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.employeeName}"), employeeNameField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), employeeNameField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        resignDateField.setToolTipText(resourceMap.getString("DateformatTooltip")); // NOI18N
        resignDateField.setName("resignDateField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.resignDate}"), resignDateField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), resignDateField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        startWorkingDateLabel.setText(resourceMap.getString("startWorkingDateLabel.text")); // NOI18N
        startWorkingDateLabel.setName("startWorkingDateLabel"); // NOI18N

        exceptionalWorkingHourLabel.setText(resourceMap.getString("exceptionalWorkingHourLabel.text")); // NOI18N
        exceptionalWorkingHourLabel.setName("exceptionalWorkingHourLabel"); // NOI18N

        onDutyLabel.setText(resourceMap.getString("onDutyLabel.text")); // NOI18N
        onDutyLabel.setName("onDutyLabel"); // NOI18N

        employeeCategoryIdLabel.setText(resourceMap.getString("employeeCategoryIdLabel.text")); // NOI18N
        employeeCategoryIdLabel.setName("employeeCategoryIdLabel"); // NOI18N

        resignDateLabel.setText(resourceMap.getString("resignDateLabel.text")); // NOI18N
        resignDateLabel.setName("resignDateLabel"); // NOI18N

        exceptionalWorkingHourField.setToolTipText(resourceMap.getString("exceptionalWorkingHourField.toolTipText")); // NOI18N
        exceptionalWorkingHourField.setName("exceptionalWorkingHourField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.exceptionalWorkingHour}"), exceptionalWorkingHourField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), exceptionalWorkingHourField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        startWorkingDateField.setToolTipText(resourceMap.getString("DateformatTooltip")); // NOI18N
        startWorkingDateField.setName("startWorkingDateField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.startWorkingDate}"), startWorkingDateField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), startWorkingDateField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        employeeNameLabel.setText(resourceMap.getString("employeeNameLabel.text")); // NOI18N
        employeeNameLabel.setName("employeeNameLabel"); // NOI18N

        EmployeeCategoryCombo.setName("EmployeeCategoryCombo"); // NOI18N

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, employeeCategoryList, EmployeeCategoryCombo);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.employeeCategoryId}"), EmployeeCategoryCombo, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        employeeIdTextBox.setEditable(false);
        employeeIdTextBox.setName("employeeIdTextBox"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.employeeId}"), employeeIdTextBox, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        employeeNameLabel1.setText(resourceMap.getString("employeeNameLabel1.text")); // NOI18N
        employeeNameLabel1.setName("employeeNameLabel1"); // NOI18N

        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.onDuty}"), jCheckBox1, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        binding.setSourceUnreadableValue(false);
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeNameLabel)
                    .addComponent(employeeCategoryIdLabel)
                    .addComponent(startWorkingDateLabel)
                    .addComponent(resignDateLabel)
                    .addComponent(onDutyLabel)
                    .addComponent(exceptionalWorkingHourLabel)
                    .addComponent(employeeNameLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addComponent(startWorkingDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addComponent(resignDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addComponent(exceptionalWorkingHourField, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addComponent(EmployeeCategoryCombo, 0, 522, Short.MAX_VALUE)
                    .addComponent(employeeIdTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addComponent(jCheckBox1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeIdTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeNameLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeNameLabel)
                    .addComponent(employeeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeCategoryIdLabel)
                    .addComponent(EmployeeCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startWorkingDateLabel)
                    .addComponent(startWorkingDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resignDateLabel)
                    .addComponent(resignDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onDutyLabel)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exceptionalWorkingHourLabel)
                    .addComponent(exceptionalWorkingHourField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setName("jPanel2"); // NOI18N

        employeeImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        employeeImage.setText(resourceMap.getString("employeeImage.text")); // NOI18N
        employeeImage.setToolTipText(resourceMap.getString("Image.toolTipText")); // NOI18N
        employeeImage.setBorder(javax.swing.BorderFactory.createEtchedBorder(resourceMap.getColor("employeeImage.border.highlightColor"), null)); // NOI18N
        employeeImage.setName("employeeImage"); // NOI18N
        employeeImage.addMouseListener(formListener);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(employeeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(employeeImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteButton, newButton, refreshButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(refreshButton)
                    .addComponent(deleteButton)
                    .addComponent(newButton))
                .addContainerGap())
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.KeyListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == saveButton) {
                EmployeeForm.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                EmployeeForm.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                EmployeeForm.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                EmployeeForm.this.deleteButtonActionPerformed(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == masterTable) {
                EmployeeForm.this.masterTableKeyReleased(evt);
            }
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == masterTable) {
                EmployeeForm.this.masterTableKeyTyped(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == masterTable) {
                EmployeeForm.this.masterTableMouseClicked(evt);
            }
            else if (evt.getSource() == employeeImage) {
                EmployeeForm.this.employeeImageMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        //
        Refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
///
        DeleteMaster();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        Save();

    }//GEN-LAST:event_saveButtonActionPerformed

    private void employeeImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeImageMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            //dbl clicked
            if (employeeIdTextBox.getText().equals("") == false) {
                pic.setImageIconSave(this, employeeImage, EmployeePicturesLocation + employeeIdTextBox.getText() + ".jpg", employeeImage.getWidth(), employeeImage.getHeight());
            } else {
                System.out.println("Please select an employee first.");
            }
        }
    }//GEN-LAST:event_employeeImageMouseClicked
    public void setEmployeeImage() {
        if (employeeIdTextBox.getText().equals("") == false) {
            System.out.println("Employee Image " + employeeIdTextBox.getText());
            pic.setImageIcon(employeeImage, EmployeePicturesLocation + employeeIdTextBox.getText() + ".jpg", "Employee Image");
        } else {
            System.out.println("Please select an employee first.");
        }
    }
    private void masterTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_masterTableKeyTyped
        // TODO add your handling code here:
        setEmployeeImage();
    }//GEN-LAST:event_masterTableKeyTyped

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
        // TODO add your handling code here:
        setEmployeeImage();
    }//GEN-LAST:event_masterTableMouseClicked

    private void masterTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_masterTableKeyReleased
        // TODO add your handling code here:
        setEmployeeImage();
    }//GEN-LAST:event_masterTableKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox EmployeeCategoryCombo;
    private javax.swing.JButton deleteButton;
    public javax.swing.JLabel employeeCategoryIdLabel;
    public java.util.List<org.bd.dev.res.database.items.EmployeeCategory> employeeCategoryList;
    public javax.persistence.Query employeeCategoryQuery;
    public javax.swing.JTextField employeeIdTextBox;
    public javax.swing.JLabel employeeImage;
    public javax.swing.JTextField employeeNameField;
    public javax.swing.JLabel employeeNameLabel;
    public javax.swing.JLabel employeeNameLabel1;
    public javax.persistence.EntityManager entityManager;
    public javax.swing.JTextField exceptionalWorkingHourField;
    public javax.swing.JLabel exceptionalWorkingHourLabel;
    public javax.swing.JCheckBox jCheckBox1;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public java.util.List<org.bd.dev.res.database.items.Employee> list;
    public javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    public javax.swing.JLabel onDutyLabel;
    public javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    public javax.swing.JTextField resignDateField;
    public javax.swing.JLabel resignDateLabel;
    private javax.swing.JButton saveButton;
    public javax.swing.JTextField startWorkingDateField;
    public javax.swing.JLabel startWorkingDateLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean Save() {
        try {
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<org.bd.dev.res.database.items.Employee> merged = new ArrayList<org.bd.dev.res.database.items.Employee>(list.size());
            for (org.bd.dev.res.database.items.Employee e : list) {
                merged.add(entityManager.merge(e));
            }
            list.clear();
            list.addAll(merged);
        }
        return true;
    }

    @Override
    public boolean AddNewToMaster() {
        org.bd.dev.res.database.items.Employee e = new org.bd.dev.res.database.items.Employee();
        entityManager.persist(e);
        list.add(e);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
        return true;
    }

    @Override
    public boolean AddNewToDetails() {
        msg.showErrorSorryNoDetailsExist(this);
        return false;

    }

    @Override
    public boolean DeleteMaster() {
        int[] selected = masterTable.getSelectedRows();
        List<org.bd.dev.res.database.items.Employee> toRemove = new ArrayList<>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            org.bd.dev.res.database.items.Employee F = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            toRemove.add(F);
            entityManager.remove(F);
        }
        list.removeAll(toRemove);
        return true;
    }

    @Override
    public boolean DeleteDetails() {
        msg.showErrorSorryNoDetailsExist(this);
        return false;
    }

    @Override
    public void Refresh() {
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }

    @Override
    public void SearchMasterShow() {
        loader.showSearch("Employee", entityManager, list, query, "employee_category_id".split(","));
    }

    @Override
    public void SearchDetailShow() {
        msg.showErrorSorryNoDetailsExist(this);
    }

    public void showSingleEmployee(String id) {
        EmployeeForm empN = new EmployeeForm();
        //empN.entityManager.createQuery("Select f From Employee f Where f.employeeId ==-23");
        loader.show(empN,"Employee");
        SearchForm sf = loader.hiddenSearch("Employee", empN.entityManager, empN.list, empN.query, "employee_category_id".split(","));
        int count = sf.setHiddenSearch(id , 0);
        System.out.println("found:" + count);
    }

}
